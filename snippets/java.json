{
    "Spring JPA Rest Repository": {
        "prefix": [
            "sb-repo-crud"
        ],
        "body": [
            "package ${0:packageName};",
            "",
            "import org.springframework.data.repository.CrudRepository;",
            "import org.springframework.data.rest.core.annotation.RepositoryRestResource;",
            "",
            "//Remove @RepositoryRestResource to disable auto rest api:",
            "@RepositoryRestResource",
            "public interface ${1:repositoryName} extends CrudRepository<${2:entityName}, ${3:entityIdType}>{}"
        ],
        "description": "JPA CRUD repository with rest api annotation"
    },
    "Spring JPA Entity": {
        "prefix": [
            "sb-entity"
        ],
        "body": [
            "package ${0:packageName};",
            "",
            "import javax.persistence.Entity;",
            "import javax.persistence.GeneratedValue;",
            "import javax.persistence.GenerationType;",
            "import javax.persistence.Id;",
            "",
            "@Entity",
            "class {1:entityClassName} {",
            "",
                "@Id",
                "@GeneratedValue(strategy = GenerationType.IDENTITY)",
                "private {2:entityIdType} id;",
            "",
                "public {1:entityClassName}() {",
                "}",
            "",
                "public {2:entityIdType} getId() {",
                    "return id;",
                "}",
            "",
                "public void setId({2:entityIdType} id) {",
                    "this.id = id;",
                "}",
            "}"
        ],
        "description": "JPA entity with ID field"
    },    
    "Spring CRUD Controller": {
        "prefix": [
            "sb-ctrl-crud"
        ],
        "body": [
            "package ${0:packageName};",
            "",
            "import java.util.ArrayList;",
            "import java.util.List;",
            "import java.util.Optional;",
            "",
            "import org.springframework.beans.factory.annotation.Autowired;",
            "import org.springframework.http.HttpStatus;",
            "import org.springframework.http.ResponseEntity;",
            "import org.springframework.web.bind.annotation.DeleteMapping;",
            "import org.springframework.web.bind.annotation.GetMapping;",
            "import org.springframework.web.bind.annotation.PathVariable;",
            "import org.springframework.web.bind.annotation.PostMapping;",
            "import org.springframework.web.bind.annotation.PutMapping;",
            "import org.springframework.web.bind.annotation.RequestBody;",
            "import org.springframework.web.bind.annotation.RequestMapping;",
            "import org.springframework.web.bind.annotation.RestController;",
            "",
            "@RestController",
            "@RequestMapping(\"/${1:resourceRootPath}\")",
            "class ${2:resourceName}Controller {",
            "",
            "    @Autowired",
            "    ${3:repositoryClassName} repository;",
            "",
            "    @GetMapping",
            "    public ResponseEntity<List<${4:entityClassName}>> getAll() {",
            "        try {",
            "            List<${4:entityClassName}> items = new ArrayList<${4:entityClassName}>();",
            "",
            "            repository.findAll().forEach(items::add);",
            "",
            "            if (items.isEmpty())",
            "                return new ResponseEntity<>(HttpStatus.NO_CONTENT);",
            "",
            "            return new ResponseEntity<>(items, HttpStatus.OK);",
            "        } catch (Exception e) {",
            "            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);",
            "        }",
            "    }",
            "",
            "    @GetMapping(\"{id}\")",
            "    public ResponseEntity<${4:entityClassName}> getById(@PathVariable(\"id\") {5:entityIdType} id) {",
            "        Optional<${4:entityClassName}> existingItemOptional = repository.findById(id);",
            "",
            "        if (existingItemOptional.isPresent()) {",
            "            return new ResponseEntity<>(existingItemOptional.get(), HttpStatus.OK);",
            "        } else {",
            "            return new ResponseEntity<>(HttpStatus.NOT_FOUND);",
            "        }",
            "    }",
            "",
            "    @PostMapping",
            "    public ResponseEntity<${4:entityClassName}> create(@RequestBody ${4:entityClassName} item) {",
            "        try {",
            "            ${4:entityClassName} savedItem = repository.save(item);",
            "            return new ResponseEntity<>(savedItem, HttpStatus.CREATED);",
            "        } catch (Exception e) {",
            "            return new ResponseEntity<>(null, HttpStatus.EXPECTATION_FAILED);",
            "        }",
            "    }",
            "",
            "    @PutMapping(\"{id}\")",
            "    public ResponseEntity<${4:entityClassName}> update(@PathVariable(\"id\") {5:entityIdType} id, @RequestBody ${4:entityClassName} item) {",
            "        Optional<${4:entityClassName}> existingItemOptional = repository.findById(id);",
            "        if (existingItemOptional.isPresent()) {",
            "            ${4:entityClassName} existingItem = existingItemOptional.get();",
            "            System.out.println(\"TODO for developer - update logic is unique to entity and must be implemented manually.\");",
            "            //existingItem.setSomeField(item.getSomeField());",
            "            return new ResponseEntity<>(repository.save(existingItem), HttpStatus.OK);",
            "        } else {",
            "            return new ResponseEntity<>(HttpStatus.NOT_FOUND);",
            "        }",
            "    }",
            "",
            "    @DeleteMapping(\"{id}\")",
            "    public ResponseEntity<HttpStatus> delete(@PathVariable(\"id\") {5:entityIdType} id) {",
            "        try {",
            "            repository.deleteById(id);",
            "            return new ResponseEntity<>(HttpStatus.NO_CONTENT);",
            "        } catch (Exception e) {",
            "            return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);",
            "        }",
            "    }",
            "}"
        ],
        "description": "Spring controller with CRUD actions implemented"
    }
}